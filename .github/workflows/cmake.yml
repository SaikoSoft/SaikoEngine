name: CMake

on: [push]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
        - os: windows-latest
          build-type: Debug
        - os: windows-latest
          build-type: Release

        - os: ubuntu-20.04
          build-type: Debug
          cc: clang-9
          cxx: clang++-9
        - os: ubuntu-20.04
          build-type: Release
          cc: clang-9
          cxx: clang++-9

        - os: ubuntu-20.04
          build-type: Debug
          cc: gcc-10
          cxx: g++-10
        - os: ubuntu-20.04
          build-type: Release
          cc: gcc-10
          cxx: g++-10

    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install conan
      shell: bash
      run: |
        touch ~/.profile
        python -m pip install --upgrade pip setuptools
        python -m pip install conan

    - name: Fix Conan ABI
      shell: bash
      if: ${{matrix.os != 'windows-latest'}}
      run: |
        source ~/.profile
        conan profile new default --detect
        conan profile update settings.compiler.libcxx=libstdc++11 default

    - name: Install dependencies
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        source ~/.profile
        conan install $GITHUB_WORKSPACE --build=missing

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      #
      # We need to source the profile file to make sure conan is in PATH
      run: |
        source ~/.profile
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.build-type}}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{matrix.build-type}}

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.build-type}}
